import React, { useState, useRef, useMemo, useCallback } from 'react';
import CreateUser from './CreateUser';
import UserList from './UserList';

function countActiveUsers(users) {
  console.log('활성 사용자 수를 세는중...');
  return users.filter(user => user.active).length;
}

function App() {

  const [inputs, setInputs] = useState({
    username: '',
    email: '',
  });
  const { username, email } = inputs;
  // console.log("inputs : ");
  // console.log(inputs);
  const onChange = useCallback(e => {
    const { name, value } = e.target;
    // console.log(name);
    // console.log(value);
    setInputs({
      ...inputs,
      [name] : value, // name값을 value로 덮어 씌우겠다. ex) name이 username(input)이면 username의 value 값을,
    });
  }, [inputs]);

  const [users, setUsers] = useState([
    {
        id: 1,
        username: '짐승내',
        email: 'tmdfo@pornhub.com',
        active : true
    },
    {
        id: 2,
        username: '짐승균',
        email: 'beast@pornhub.com',
        active: false
    },
    {
        id: 3,
        username: '충내',
        email: 'nsn@msn.com',
        active: false
    }
  ]);

  const nextId = useRef(4);

  const onCreate = useCallback(() => {
    const user = {
      id: nextId.current,
      username,
      email, // ...inputs 로 대체 가능
    };
    setUsers(users => [...users, user]);
    //setUsers(users.concat(user)); 로 대체 가능
    setInputs({
      username: '',
      email : '',
    });
    console.log(nextId.current);
    nextId.current += 1;
  }, [username, email]);

  const onRemove = useCallback((id) => {
    console.log("삭제버튼 클릭 : " + id);
    console.log("삭제전 users 목록 : ");
    console.log(users);
    setUsers(users => users.filter(user => user.id !== id));
  }, [users]);

  const onToggle = useCallback((id) => {
    console.log("수정버튼 클릭 : " + id);
    setUsers(users => users.map(
                        user => user.id === id
                          ? { ...user, active: !user.active }
                          : user
    ));
    // 파라미터로 가져온 id 값이 일치한다면 active 값을 바꿔준다.
    // "users.map"의 파라미터를 "user"로 사용 하고 user.id의 값과 onToggle을 통해 가져온 id의 값이 일치한다면, 
    // "? { ...user, active: !user.active }" "...user"로 객체를 복사해오고 ",active:" 로 active(boolean 값임.) 값은 반대로 바꿔준다. !user.active
    // ": user" 일치하지 않는다면 기존의 값을 그대로 사용하겠다.
  }, []);
  const count = useMemo(() => countActiveUsers(users), [users]);

  return (
    <>
      <CreateUser 
        username={username} 
        email={email} 
        onChange={onChange} 
        onCreate={onCreate}
      />
      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />
      <div>활성 사용자 수 : {count} </div>
    </>
  );
}

export default App;
